from youtube_transcript_api import YouTubeTranscriptApi
from youtube_transcript_api.formatters import TextFormatter
import pandas as pd
import csv

#  use cookies extension to get a cookies.txt file from an age restricted video

def caption_data(video_ids_fn, outfolder="data/"):
    data_fields = ["video_id", "text", "translated", "original_lang", "autogenerated"]
    with open(outfolder+"caption_data.csv", 'a') as f:
        writer = csv.writer(f)
        writer.writerow(data_fields)
    
    formatter = TextFormatter()
    with open(video_ids_fn) as fn:
        for video_id in fn:
            try:
                video_data = fetch_transcript(video_id, formatter)
            except:
                video_data = [video_id, None, None, None, None]
            with open(outfolder+"caption_text.csv", 'a') as f:
                writer = csv.writer(f)
                writer.writerow(video_data)  
            
    return



def fetch_transcript(video_id, formatter):
    transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)
    lang_code = "en"
    en_exists = False
    
    en_transcript = None
    text = None
    translated = None
    org_lang = None
    autogenerated = None

    for transcript in transcript_list:
        if transcript.language_code == lang_code:
            en_exists = True
            en_transcript = transcript.fetch()
            translated = False
            autogenerated = transcript.is_generated
            org_lang = lang_code
            
            break
    if not en_exists:
        for transcript in transcript_list:
            translation_languages = [translation["language_code"] for translation in transcript.translation_languages]
            if lang_code in translation_languages:
                en_transcript = transcript.translate(lang_code).fetch()
                translated = True
                org_lang = transcript.language_code
                autogenerated = en_transcript.is_generated
                break
                
    if en_transcript is not None: 
        text_formatted = formatter.format_transcript(en_transcript)
        text = text_formatted.replace("\n", " ")
                
    return [video_id, text, translated, org_lang, autogenerated]
    

                
                
     
 

